from r2b2.audit import Audit as Audit, PairwiseAudit as PairwiseAudit
from r2b2.contest import Contest as Contest
from typing import Any

class Minerva2(Audit):
    def __init__(
        self, alpha: float, max_fraction_to_draw: float, contest: Contest
    ) -> None: ...
    def get_min_sample_size(
        self, sub_audit: PairwiseAudit, min_sprob: float = ...
    ) -> Any: ...
    def satisfactory_sample_size(
        self, left: Any, right: Any, sprob: Any, num_dist: Any, denom_dist: Any
    ): ...
    def kmin_search_upper_bound(self, n: Any, sub_audit: PairwiseAudit) -> Any: ...
    def sample_size_kmin(
        self,
        left: Any,
        right: Any,
        num_dist: Any,
        denom_dist: Any,
        sum_num_right: Any,
        sum_denom_right: Any,
        orig_right: Any,
    ): ...
    def find_sprob(self, n: Any, sub_audit: PairwiseAudit) -> Any: ...
    def binary_search_estimate(
        self, left: Any, right: Any, sprob: Any, sub_audit: PairwiseAudit
    ) -> Any: ...
    def next_sample_size(
        self, sprob: float = ..., verbose: bool = ..., *args: Any, **kwargs: Any
    ): ...
    def get_upper_bound(self, n: Any, start: Any): ...
    def stopping_condition_pairwise(self, pair: str, verbose: bool = ...) -> bool: ...
    def next_min_winner_ballots_pairwise(self, sub_audit: PairwiseAudit) -> int: ...
    def compute_min_winner_ballots(  # type: ignore
        self, sub_audit: PairwiseAudit, round_size: int, *args: Any, **kwargs: Any
    ) -> Any: ...
    def find_kmin(
        self, sub_audit: PairwiseAudit, sample_size: int, append: bool
    ) -> Any: ...
    def compute_risk(  # type: ignore
        self, votes_for_winner: int, pair: str, *args: Any, **kwargs: Any
    ) -> Any: ...
    def get_risk_level(self): ...
    def current_dist_null(self) -> None: ...
    def current_dist_reported(self) -> None: ...
    def compute_all_min_winner_ballots(  # type: ignore
        self,
        sub_audit: PairwiseAudit,
        max_sample_size: int = ...,
        *args: Any,
        **kwargs: Any
    ) -> Any: ...
