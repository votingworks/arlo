from r2b2.audit import Audit as Audit, PairwiseAudit as PairwiseAudit
from r2b2.contest import Contest as Contest
from typing import Any

class SO_BRAVO(Audit):
    selection_ordered: bool = ...
    def __init__(
        self, alpha: float, max_fraction_to_draw: float, contest: Contest
    ) -> None: ...
    def get_min_sample_size(
        self, sub_audit: PairwiseAudit, min_sprob: float = ...
    ) -> Any: ...
    def find_sprob(self, n: Any, sub_audit: PairwiseAudit) -> Any: ...
    def next_sample_size(
        self, sprob: float = ..., verbose: bool = ..., *args: Any, **kwargs: Any
    ): ...
    def stopping_condition_pairwise(self, pair: str, verbose: bool = ...) -> bool: ...
    def next_min_winner_ballots_pairwise(self, sub_audit: PairwiseAudit) -> int: ...
    def compute_min_winner_ballots(
        self, sub_audit: PairwiseAudit, rounds: int, *args: Any, **kwargs: Any
    ) -> Any: ...
    def compute_risk(
        self, votes_for_winner: int, pair: str, *args: Any, **kwargs: Any
    ) -> Any: ...
    def get_risk_level(self): ...
    def compute_all_min_winner_ballots(
        self,
        sub_audit: PairwiseAudit,
        max_sample_size: int = ...,
        *args: Any,
        **kwargs: Any
    ) -> Any: ...
